SELECT * FROM AUTHORS
SELECT * FROM BOOKS

--NATURAL JOIN - PURE CARTESION A*B
--EQUI JOIN - CONDITON DEPT.DEPTNO = EMP.DEPTNO
--NON EQUI JOIN - SELECT EMPNO,ENAME, JOB, SAL, GRADE FROM EMP, SALGRADE WHERE SAL BETWEEN LOSAL AND HISAL
-- OUTER JOIN - SHOWS UNMATCHED RECORDS ASWELL
    -- RIGHT OUTER 
    -- LEFT OUTER
    -- FULL OUTER

SELECT * FROM AUTHORS, BOOKS WHERE AUTHORS.AUTHORID = BOOKS.AID
SELECT * FROM AUTHORS, BOOKS WHERE AUTHORS.BID = BOOKS.BOOKID

--ANSI SQL SYNTAX
SELECT * FROM AUTHORS LEFT OUTER JOIN BOOKS   ON AUTHORS.AUTHORID = BOOKS.AID
SELECT * FROM BOOKS   LEFT OUTER JOIN AUTHORS ON AUTHORS.AUTHORID = BOOKS.AID

SELECT * FROM AUTHORS RIGHT OUTER JOIN BOOKS   ON AUTHORS.AUTHORID = BOOKS.AID
SELECT * FROM BOOKS   RIGHT OUTER JOIN AUTHORS ON AUTHORS.AUTHORID = BOOKS.AID

SELECT * FROM BOOKS   FULL OUTER JOIN AUTHORS ON AUTHORS.AUTHORID = BOOKS.AID

-- ORACLE SPECIFIC SYNTAX FOR OUTER JOIN
SELECT * FROM AUTHORS, BOOKS WHERE  BOOKS.AID (+)= AUTHORS.AUTHORID 
SELECT * FROM AUTHORS, BOOKS WHERE  BOOKS.AID = AUTHORS.AUTHORID (+)


SELECT * FROM AUTHORS, BOOKS WHERE  BOOKS.AID (+)= AUTHORS.AUTHORID 
UNION
SELECT * FROM AUTHORS, BOOKS WHERE  BOOKS.AID = AUTHORS.AUTHORID (+)

-- SET OPERATORS

SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=7
UNION
SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=5

SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=7
UNION ALL
SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=5

SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=7
MINUS
SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=5

SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=7
INTERSECT
SELECT ROWNUM, EMPNO,ENAME,DNO FROM EMP WHERE ROWNUM<=5

-- SELF REFERENTIAL INTEGRITY ON THE TABLE ITSELF - CROSS JOIN

SELECT M.EMPNO AS "MANAGER EMPNO", M.ENAME AS "MANAGER ENAME", 
W.EMPNO AS "WORKER EMPNO",W.ENAME AS "WORKER ENAME" 
FROM EMP M,EMP W WHERE M.EMPNO = W.MGR;

SELECT W.ENAME AS "W ENAME" || " WORKING AS " || W.JOB "W JOB" || " AND REPORTING TO " || 
M.ENAME AS "M ENAME" || " WHO IS WORKING AS " || M.JOB AS "M JOB" FROM EMP M,EMP W WHERE M.EMPNO = W.MGR;

SELECT ENAME  || ' IS WORKING AS ' ||  JOB FROM EMP;


SELECT EMPNO,ENAME,SAL, SAL*0.30 AS "HRA" FROM EMP;









CREATE TABLE WORKER AS SELECT * FROM EMP;

SELECT * FROM EMP;
SELECT * FROM WORKER;

SELECT EMP.EMPNO,EMP.ENAME, WORKER.EMPNO,WORKER.ENAME 
FROM EMP, WORKER WHERE EMP.EMPNO = WORKER.MGR;

ALTER TABLE WORKER 
RENAME COLUMN EMPNO TO ENO;



CREATE SEQUENCE MYSEQUENCE 

DROP SEQUENCE MYSEQUENCE;
DROP SEQUENCE TEST_SEQ;

CREATE SEQUENCE TEST_SEQ
INCREMENT BY 1 
START WITH 1;

CREATE TABLE EMP5
(
     EMPNO NUMBER PRIMARY KEY,
     ENAME VARCHAR2(20)
)
TRUNCATE TABLE EMP5

CREATE SEQUENCE TEST_SEQ2
INCREMENT BY 3 
START WITH 9;

INSERT INTO EMP5 VALUES (TEST_SEQ.NEXTVAL,'JANE');
INSERT INTO EMP5 VALUES (TEST_SEQ.NEXTVAL,'JANE');
INSERT INTO EMP5 VALUES (TEST_SEQ.NEXTVAL,'JACKY');
INSERT INTO EMP5 VALUES (TEST_SEQ.NEXTVAL,'JACKSON');
INSERT INTO EMP5 VALUES (TEST_SEQ.NEXTVAL,'JACKLINE');


INSERT INTO EMP5 (EMPNO,ENAME) VALUES (TEST_SEQ3.NEXTVAL,'JANE');
INSERT INTO EMP5 (EMPNO,ENAME) VALUES (TEST_SEQ3.NEXTVAL,'JANE');
INSERT INTO EMP5 (EMPNO,ENAME) VALUES (TEST_SEQ3.NEXTVAL,'JACKY');
INSERT INTO EMP5 (EMPNO,ENAME) VALUES (TEST_SEQ3.NEXTVAL,'JACKSON');
INSERT INTO EMP5 (EMPNO,ENAME) VALUES (TEST_SEQ3.NEXTVAL,'JACKLINE');
SELECT * FROM EMP5

INSERT INTO EMP5 VALUES (&EMPNUMBER, '&EMPNAME','&DATEOFBIRTH') ;
ALTER TABLE EMP5 ADD DOB DATE
SELECT 
* FROM EMP5

CREATE SEQUENCE TEST_SEQ3
INCREMENT BY -1 
START WITH 100
MINVALUE 1
MAXVALUE 100
;
TRUNCATE TABLE EMP5
INSERT INTO EMP5( )

--ORACLE ANALYTICAL PROCESSING FEATURES

SELECT DNO,JOB,COUNT(JOB),SUM(SAL) FROM EMP GROUP BY (DNO,JOB) ORDER BY DNO,JOB;
SELECT DNO,JOB,COUNT(JOB),SUM(SAL) FROM EMP GROUP BY ROLLUP (DNO,JOB) ORDER BY DNO,JOB;

SELECT DNO,JOB,COUNT(JOB),SUM(SAL) FROM EMP GROUP BY ROLLUP (DNO,JOB)  having JOB IS NULL
SELECT DNO,JOB,COUNT(JOB),SUM(SAL) FROM EMP GROUP BY CUBE (DNO,JOB) HAVING JOB IS NULL AND DNO IS NULL

--PL SQL - PROCEDURAL LANGUAGE FOR SQL

-- CODE BLOCKS = 1) ANNONYMOUS CODE BLOCK. 2) NAMED BLOCK

--BLOCK1
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO PL SQL');
END;

--BLOCK2
DECLARE
    X NUMBER:=100;
BEGIN
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
END;

--BLOCK3
DECLARE
    X NUMBER:=100;
    Y VARCHAR2(20):='NEW YORK';
    Z NUMBER:=10.2;
BEGIN
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
    DBMS_OUTPUT.PUT_LINE('VALUE OF Y '||Y);
    DBMS_OUTPUT.PUT_LINE('VALUE OF Z '||Z);
    
END;

--BLOCK4
DECLARE
    X EMP.EMPNO%TYPE;
    Y EMP.ENAME%TYPE;
    Z EMP.SAL%TYPE;
BEGIN
    SELECT EMPNO,ENAME,SAL INTO X,Y,Z FROM EMP; -- WHERE EMPNO=7844;
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
    DBMS_OUTPUT.PUT_LINE('VALUE OF Y '||Y);
    DBMS_OUTPUT.PUT_LINE('VALUE OF Z '||Z);
END;

--BLOCK5

DECLARE
    EMP_REC EMP%ROWTYPE;    
BEGIN
    SELECT * INTO EMP_REC FROM EMP WHERE EMPNO=7844;
    DBMS_OUTPUT.PUT('VALUE OF X '||EMP_REC.EMPNO);
    DBMS_OUTPUT.PUT(' VALUE OF Y '||EMP_REC.ENAME);
    DBMS_OUTPUT.PUT(' VALUE OF Z '||EMP_REC.SAL);
    DBMS_OUTPUT.PUT_LINE('----------------------------');

END;


SET SERVEROUTPUT ON

DECLARE
  X NUMBER:=1;
BEGIN
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
    LOOP
        DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
        X:=X+1;
        IF X=10 THEN
            EXIT ;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);

END;

-- BLOCK ANOTHER LOOP

DECLARE
  X NUMBER:=1;
BEGIN
    WHILE X<=5
    LOOP
        DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
        X:=X+1;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);

END;

-- BLOCK USING THE FOR LOOP

-- BLOCK ANOTHER LOOP


BEGIN
    FOR X IN 1..5 
    LOOP
        DBMS_OUTPUT.PUT_LINE('VALUE OF X '||X);
    END LOOP;

END;

-- FOR WITH CURSORS


-- CURSOR
-- IS A POINTER TO THE DATA SET 
    -- CURSOR HAS A LIFE CYCLE

    SELECT * FROM EMP;


DECLARE
    CURSOR EMP_CUR IS SELECT * FROM EMP ; -- DECLARE IT
    EMP_RECORD EMP%ROWTYPE;
BEGIN
    --OPEN THE CURSOR
    OPEN EMP_CUR;
            -- UTILIZE THE CURSOR
            LOOP
                FETCH EMP_CUR INTO EMP_RECORD;
                DBMS_OUTPUT.PUT_LINE('EMP NUMBER : '||EMP_RECORD.EMPNO); 
                DBMS_OUTPUT.PUT_LINE('EMP NAME.  : '||EMP_RECORD.ENAME);
                DBMS_OUTPUT.PUT_LINE('EMP SALARY : '||EMP_RECORD.SAL);
                DBMS_OUTPUT.PUT_LINE('-------------------------');
                
                IF EMP_CUR%NOTFOUND THEN
                    EXIT;
                END IF;
            END LOOP;
    -- CLOSE THE CURSOR
    CLOSE EMP_CUR;
END;

-- WHILE LOOP FOR CURSOR

DECLARE
    CURSOR EMP_CUR IS SELECT * FROM EMP N WHERE JOB='MANAGER' ; -- DECLARE IT
    EMP_RECORD EMP%ROWTYPE;
BEGIN
    --OPEN THE CURSOR
    OPEN EMP_CUR;
            -- UTILIZE THE CURSOR
            FETCH EMP_CUR INTO EMP_RECORD;

            WHILE EMP_CUR%FOUND
            LOOP
             
                DBMS_OUTPUT.PUT_LINE('EMP NUMBER : '||EMP_RECORD.EMPNO); 
                DBMS_OUTPUT.PUT_LINE('EMP NAME.  : '||EMP_RECORD.ENAME);
                DBMS_OUTPUT.PUT_LINE('EMP SALARY : '||EMP_RECORD.SAL);
                DBMS_OUTPUT.PUT_LINE('-------------------------');
                FETCH EMP_CUR INTO EMP_RECORD;
            END LOOP;
    -- CLOSE THE CURSOR
    CLOSE EMP_CUR;
END;

-- CURSOR FOR LOOP

DECLARE
    CURSOR EMP_CUR IS SELECT * FROM EMP N WHERE JOB='MANAGER' ; -- DECLARE IT
BEGIN
        --  FOR    X       IN 1..5
            FOR EMP_RECORD IN EMP_CUR
            LOOP
             
                DBMS_OUTPUT.PUT_LINE('EMP NUMBER : '||EMP_RECORD.EMPNO); 
                DBMS_OUTPUT.PUT_LINE('EMP NAME.  : '||EMP_RECORD.ENAME);
                DBMS_OUTPUT.PUT_LINE('EMP SALARY : '||EMP_RECORD.SAL);
                DBMS_OUTPUT.PUT_LINE('-------------------------');
            END LOOP;
END;








