Oracle-weblogic
Ibm-WebSphere
Redhat-Jboss

Spring container <==




		Java Programming Language
			|
	---------------------------------
	|		|		|
	JSE		JEE		JME
	|		|		|
  Core Java	   Enterprise		Micro/Android [ mobile apps ]
	|		   |
Language fundas		-----------
OOPS concepts		|	  |
packages		Web	EJB
isA/hasA/		|	  |
usesA/produceA		Servlets  --------------------------------
Exception handling	JSP	  |		|		|
MultiThreading		React	Session		Entity		Message
Generics/		Angular	 |SPRING	|Hibernate/JPA    | JMS
				 |		|		  |
Collections		-----------------	--------	----------
File handling		|1		|2	|3	|4	|5	|6
Jdbc			Stateless   Stateful	BMP	CMP	SMS	Mail
						bean	Hibernate/JPA/EclipseLink
						managed
						persistence [ store the object state on teh DB ]
	

					Object [ RAM ]
					|private data [ safe with JVM ]
					| sandbox
			---------------------------------
				|
			save this
			object in a non-volatile memory			
				|
		------------------------------
		|			|
		FILE			DBMS [ table ]
		|			|
		|			-------------------
		|			|		|
	Serialization			JDBC		Persistence
		|			|		storing the java object 
		|			Programmer	as a ROW/record
	ObjectOutputStream		is involved		|
	ObjectInputStream		to write/develop	CMP
					the queries
					|
					BMP
	
			Table
		DEPT
		deptno	dname	 loc
		10	ACC	 NY
		20	SALES	 NJ
		30	PURCHASE NP

	class is not a table, table is not a class

		ORM
	Bean / POJO
	class Department { 
		int departmentNumber;
		String departmentName;
		String departmentLocation;
			set/get
	}

	Department dept = new Department(40,"QMS","NM");


	HSQLDB	23 year old db written Java language

		11 MB

	----------------------------------	
	JDBC Steps
	----------


		JAva				Database
		| BL				| DL
		| int				| number
		| String			| varchar2(20)
		| LocalDate			| date
		+--------------Driver ----------+
		1party				2party
				3rd party

		Oracle				Oracle
						HSQLDB
						MS-SQL server 
						MySQL
						PostG
						MariaDB
						Sybase
						HANA
						MongoDB	


				Driver
				|   - to transport the data
				|  1. decide the database
				|  2. know your database driver
				|     and download it
				|	     |
				|	------------
				|	|	   |
				|   make a 	make a 
				|  java project  maven project
				| [ manually		automate
				| resolve the		the dependencies
				| dependencies]		via pom.xml
			DriverManager
			|3. connect to the db
			|
			Connection
				|4. acquire teh connection
				|
			-----------------------------------
			|		|		|
		Statement	PreparedStatement	CallableStatement
		5. decide	    5 . decide		5. decide
			your query
		SELECT		 INSERT/UPDATE/DELETE	stored procedure/fuction




	


-----------------------------------------


	1. create a maven project

	2. pom.xml file is created

	3. declare the project dependencies in the pom.xml file


			MyEclipseLinkJPA
				|
				|
		-----------------------------------
		|				|
		src				pom.xml
		|				|
	----------------			specify the dependencies here
	|		|			eg, Oracle Driver, Junit Classes
	main		test			Spring, hibernate, Hsqldb,eclipselink
	|		 |			
-----------------	java<-- test cases using JUNIT [ testing framework ]
|		|
java		resources
|			|
*.class		project specific settings in few files
|			|
POJO			META-INF
			|
			persistence.xml


	Steps to persist an object in JPA
	-----------------------------------
	1. make a maven project
	2. declare dependencies in pom.xml
	3. setup META-INF\persistence.xml 
		[ it will mention the Jpa Provider, driver, url, username, password ]
	4. create a POJO/Bean, e.g.
		class Department { }

	5. mark it with required annotations
	6. Write a code to connect to EclipseLink JPA framework
	7. create your object to persist it there



































		bookmyshow.com
			makemytrip.com
			amazon.com
			|
			goair.com
			|
			mumbai to dubai
			31st July 2025




	OOPS concept
	-----------------

		Object Oriented programming system

	
	POPS = procedure oriented

			---------------------------		
			|	global data	|
			|			|
			|fun1() 	fun2()	|	fun3()
			-------------------------
				global data

				main

			fun4()		fun5()		fun6()


		gents tailor = make a shirt
			 |
			customer = cloth

		1. by observing the requirement 
			full/half shirt / take measurement of the cloth
				2.25 meter 
				2.50


		2. measure the body of the customer = measure tape [ READING ]
		3. mark it on the paper = pencil/pen + paper [ 	WRITING ]
		4. starts making a cutting diagram on the cloth as per the measurements taken
			on the paper in step 3 [ DRAWING with chalk ]

		5. cutting as per teh cutting digram - scissor
			[ no need to refer teh measurement numbers from the paper ]
		6. stitching using the sewing machine 
		7. trial 


		POPS = PROCUDURE <-- DATA - TOP TO BOTTOM

		OOPS = DATA <--------PROCEDURE - BOTTOM TO TOP
	


		

	Naming convention


			1. ClassName - class BankAccount <- PascalCase

			2. fieldName - int accountNumber
				       String socialSecurityNumber;

			3. methodName - void setLookAndFeel() { }

					void godIsNowhere() { }

					void godIsNowHere() { }

			4. CONSTANTS	- int MAX=10;   int SPEED_OF_LIGHT=186000;
				
			5. packages    - java.lang	myproject.oracle.bank


			below naming convention is horrible
			|
			package MyOracle.BankProject;
	
			class bankAccount
			{
				float AccountBALANCE;


				void WithdrawCash() {
				}
			}





	this.  <-- refer the data members / fields / methods 

	this() <-- invoke a ctor from the current class ctor

	super. <-- refer to the nearest super class member/function

	super() <-- invoke a ctor from the nearest super class 
			by default this is the first statement
			of every constructor

	----------------------------------------


		Packages = to organize the concerned classes into a folder


					bank
					|
			------------------------------------------
			|		|			|
			account		transfer		statement
			|		|			|
			BankAccount	FundTransferService	MonthlyStatement
			SavingsAccount  QuickTransferService	WeeklyStatement
			CurrentAccount	ImpsService		QuarterlyStatement
								YearlyStatement

		bank.acc
		bank.transfer
		bank.statement

	1				jungle
					|  Human, Woman, Kid
					|
			-----------------------------------------------------
			|		|		|		|
	2		cave		river		tree		farm
			|		|		|		|
			Tiger		Frog		Parrot		House
			Bee		Fish		Monkey		   
			Beehive				
			WhiteTiger

			A - d
			B - p
			C - pro
			D - pu


	access specifiers = public protected private [default]

	data qualifiers = final, static, abstract

		final				static				abstract
-------------------------------------------------------------------------------------------------
		a field cannot			shared copy
		be modified/changed		of a variable
field		Its a constant			across the  
		final float PI=3.14f;		objects of the
		PI=3.18f;//error		class
-------------------------------------------------------------------------------------------------
		a method which cannot		can be used to
		be overridden			refer other 
method						static members


-------------------------------------------------------------------------------------------------
		a class that cannot be
class		extended
		OR cannot be subclassed
		final class A { }
		class B extends A {} //error
-------------------------------------------------------------------------------------------------
			  +----------------+
			 /		  /|
			/	         / |
			+---------------/ <-----how is it
			|    SCREEN     |  |
			|   What is it? |  +
			|      printSlot|<----- how the cash is dispensed
			| cash slot	| /	or how the print is	
			|		|/	printed
			+---------------+ how the oauth works there	
				ATM
OOPS Concepts
----------------

	1. Abstraction
		- it is the "what is?" part of an object
		- what is an ATM object?
			- dispense cash
		- hiding the complex details of an object
		a) data abstraction
			how much cash is there in the ATM?

			*private double totalCashAtATM;

		b) procedural abstraction
			hiding some functions which are present 
			in the ATM, and not used by the user ever

			security camera recording
			logging
			cash book maintenance

			*private void maintainCashRecord() { }

		c) class abstraction
			hiding a complete unit of data+functions
			*private class Security { }

	class ATM
	{
data		private double totalCashAtATM;
		private long totalCustomerHitTillDate;
function	private void maintainCashRecords() { .....  }
class		private class Security {data+ functions }
		public double cashToDispense;

		public void dispenseCash() {
			totalCAshAtATM-=cashToDispense;
		 } <-- available to the user
		public void withdraw(double amt)
		{
			cashToDispense = amt;
		}
	}


	2. Encapsulation
		- it is the "how is it?" part of an object
		- how is the ATM dispensing the cash?
		- it is the coding part of the complexity 

			data encapsulation
				- private data
			
		

		


	3. Polymorphism
		ctrl + C = copy
		ctrl + C = cancel
		ctrl + C = interrupt

		poly = many
		morphism = acquiring forms

		formless => the form

		a. class extension

				Doctor
				|MBBS,MD
			----------------
			|
			Surgeon
			|cut(){}
			|stitch(){}
		------------------------------------
		|		|		|
	HeartSurgeon		NeuroSurgeon	OrthoSurgeon
	doOpenHeartSurgery()  doNeuroSurgery()   doBoneSurgery(){}


		b. function overloading
			to write multiple functions with same name
			but differentiated on the following temrs

			i) by type of argument
			ii) by number of arguments
			iii) by seqeunce of type of arguments

		c. function overriding
			to redefine a function in the child class
			which is already defined by its parent class


		d. operator overloading



	4. Inheritance
		ability of a business entity to acquire properties
		from the existing entities

		class A
		|isA
		class B extends A
		|isA
		class C extends B

		A is A
		--------
		B is B
		B is A
		---------
		C is C
		C is B
		C is A
		--------	
				Inheritance
				|
		--------------------------------
		|				|
		Derivation		Implementation

		A <-concrete		A <-- abstract/interface I1  I2
		|			|			 |   |
		B <-concrete		B			 -----
								 |

		mind = disturbing frequency= intangible = information
  		|
	<--------------->
	|	X	|
	past	|	future
	|    present	    |
    good|bad		good|bad

+
body <-- oracle company here





water dew <-- eye
|
H2O - water molecule
|
H atom H + O atom
|
proton + neutron + electron
|
subatomic world - Dr. Bruce Lipton
			1lakh x zoom
boson/lepton
string theory
|

vibrations | frequency 

	gold  alm  copper  zinc  



thoughts = thoughtrons
								 B
feelings are the main indicators

thoughtrons
|
lifetrons

	The Autobiography of a Yogi


	body
	mind			- iccha shakti [ desire ]
	buddhi - intellect	- gyana shakti
	atma			- atma shakti
	

take a paper + pen

	1. using ur right hand draw number 6 on the paper
		[ anti clock pattern is used to draw 6 ]

	2. using ur right leg toe, draw circle on the floor
		in clockwise

	3. do the 1 and 2 at the same time






	5. Object communication

















Constructors
==============


	class A { }

			above class has a default constructor

	---------------------------


	class B {
		B() { }
	}
		above class DOES NOT have a default constructor

		it is known as explicit no-arg constructor

	-----------
	EATHER U CAN HAVE EXPLICIT OR IMPLICIT CTOR , BUT NOT BOTH
	-----------------------------------
	every class has a super(); as 
	default first line in its any constructor
	--------------------

	class Person 
	{
	}
	class Student extends Person
	{
	}
in above case Student's default ctor is invoking Person's default ctor
	-----------------	
	class Person
	{
		Person(int a) { }
	}

	class Student
	{
	}
		the Student's default ctor is searching for a
		default ctor in Person ( which is not there )
	------------------------------

	class Person
	{
		Person(int a) { }
	}

	class Student
	{
		Student(int x,int y)
		{
			super(x);
		}
	}
		the Student's explicit ctor is searching for a
		parameterized ctor in Person ( which is there )
	------------------------------



	


abstract classes
------------------

	- abstract class may have abstract / non -abstract methods


	- abstract|incomplete|partial contract of a class


		
 		abstract
		  |
	-------------------------
	|			|
	class			method
	|			   |
abstract class BankAccount	abstract class God 
{				{
	data				
	+				abstract void bless();
	function
}				}
				|
			------------------------------
			|		|	   |	   
			Krishna		Jesus	  Buddha
			bless(){}	bless(){}  bless(){}


	

Interfaces 
		= pure partial contract of a class

		it must have abstract methods

		default access specifier is public


	
			Animal
			|
	--------------------------------------------------
	|		 |				|
	Mammal		Fish				Bird
	|		|				|
 ------------------+	------------------		-----------------
 |		   |	|     |		|		|		|
Tiger		  Bat	Whale Dolphin	SwordFish 	Parrot		Sparrow


		A
		|
		B  single level

		A
		|
		B
		|
		C   multi level

			<--interfaces-->
		A	B	    C
		|class	|	    |
		---------------------
		        |
			D

		class A { }
		interface B { }
		interface C { }
		
		class D extends A implements B, C
		{
		}

		D is D
		D is A
		D is B
		D is C






		
Every class / interface /array are children of java.lang.Object class


		Object 
		|
		| Reactive
		|  |react();
		|  |
		Person
		| react(){}
		|
		|  Responsive
		|   | respond();
		Student
		|
		| Working 
		|  | work();
		Employee
		|
		| Executing
		|  | execute();
		Executive
		|
		| Managing
		| | manage();
		Manager
		|
		| Directing 
		|  | direct();
		Director



				     Instrument <--interface
					|use();
			-------------------------------------
			|				|
			Musical				Medical <--interfaces
			|playMusic()			|opearte()
	-----------------------------	---------------------------------
	|			|	|			|
	StringBased	  AirBased	SurgicalMedical	PathologicalMedical <--abstract series
	|tuneString();	    |blowAir();	|sterilize();		|readIt();
	|		    |		|			|
	Guitar		    Flute	SurgicalCutter		ECGMAchine <---- general / concete classes
	pluck();   operateSevenHoles();	   cut();		  plotCardio();

		Instrument i = new Guitar(); <-- String Based
		Instrument i = new Flute();  <-- Air Based
		Instrument i = new SurgicalCutter(); <-- Surgical Medical
		Instrument i = new ECGMachine(); <-- Pathological Medical


	In C++
	
	call by value		call by address		call by reference
	
	a=10, b=20		a=10,b=20		a=10,b=20
	swap(a,b);		swap(&a,&b);		fun(a,b);

	swap(int x,int y)	swap(int *p1,int *p2)	swap(int &x, int &b)
	{			{			{
	}x,y wont reflect	}p1,p2 will update a,b	}x,y will update a,b

Generics and Collections
-------------------------

	
	Call By Value

	
	Component Orthogonal Space


				x <--- data type, int
				| FruitJuice
				| Noodles*		
				| FriedRice
				| Pickle
				| CoconutWater
				| SoftDrink [ Sprite ]
				| Wine
				| BankAccount, SavingsAccoung
				| CurrentAccount, LoanAccount
				| Vehicle, HomeLoan,Applicant
				| Customer
		-------------------------------------
		|		|		|
		y		i		z
		|		|		|
		container<-->iterator		algorithm
		|		|		|
		array	      array		array
		|		|		|
	  Collection<--interface		Collections<--class
		|				
	-------------
	|	|
	List	Set<--interfaces
	|	|
ArrayList	TreeSet
  LinkedList      HashSet

	int score[50]	   for loop		search, sort, etc
	  JuiceGlass		Straw		drink()	
	    Bowl*		ChopStiks*	gulp()*
	   Plate		Spoon		eat()
	    Jar			PickleFork	lick()
	Coconut			Straw		drink()
	Bottle			Straw		drink()
	  Y-ShapeGlass		-		



				






	ArrayList 
	 - growable at the end
	 - duplicates allowed

		PlayList in VLC media player
		
	Logs 

	+-------+
     0	|	|
 	+-------+
     1	|	|
	+-------+
     2	|	|
	+-------+
     3	|	|

            ^
	   /|\
	    |

	efficient in search
	efficient in append
	less efficient in insert in between
	
	-----------------

	Linked Link

	+-------+	+-------+	+-------+
	|      2|------>|	|------>|	|
	|      0|	|	|	|	|
	|      0|<------|	|<------|	|
	+-------+	+-------+	+-------+
	100		200		300

	less efficient in search
	flexible in DML

	PhoneBook

	-----------------
	Set  = unique data | no duplicates allowed
	TreeSet

				root
				|50
		---------------------------------
		|40				|60
	----------------		----------------
	|20		| 45	      55|		|75
  ----------	  -----------	   ----------	   ------------	
  |         |     |         |      |        |      |         |
  10        39    42        48     52       57     72        80


	numerical set
	Chemical Elements from the periodic table

	----------------------

	HashSet
		
		+-----------------------+
		|  Science	|Comics	|
		|		|	|
		|		|	|
		+-----------------------+
		|Spi	| Fictions	|
		|	|		|
		+-----------------------+
		| Encyclopedia	|Novels	|
		|		|	|
		+-----------------------+
	


	1. download oracle from the site
		https://www.oracle.com/database/technologies/xe-prior-release-downloads.html#license-lightbox

	2. extract it 

	3. run setup.exe as admin or your scope 

	4. go thru the wizard

	5. after installation, open the sql command line client from windows search

	6. SQL> connect /as sysdba
	
	7. SQL> create user scott identified by tiger

	8. SQL> grant all privileges to scott;

	9. SQL> connect scott/tiger


	10. goto the https://github.com/vishhaldawane/Get940/blob/main/demo.txt
	
	11. paste the table creation demo.txt's code at this prompt

	12. SQL> select * from dept


















